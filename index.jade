!!! 5
html(lang='ja')
  head
    meta(charset='UTF-8')
    title メタ言語を使おう！
    meta(name='author', content='Yu Inao')
    meta(name='rights-standard', content='pd')
    link(rel='stylesheet', href='//normalize-css.googlecode.com/svn/trunk/normalize.min.css')
    link(rel='stylesheet', href='./res/google-code-prettify/sunburst.css')
    link(rel='stylesheet', href='./css/index.css')
  body.impress-not-supported
    section.fallback-message
      p impress.js を使っています。Chrome, Safari, Firefox のどれか最新版でご覧下さい。
    div#impress
      section#bore.step(data-x='0', data-y='0', data-z='0', data-rotate="0")
        h1 メタ言語を使おう！

      section.step.message
        p 最近では HTML とか CSS とか JavaScript をクソマジメに書いていると、バカにされる風潮がある。

      section.step.message
        p そういえば、SCSS とかいう変な CSS が巷では流行っているらしい。

      section.step.message
        p なんでも、「メタ言語」というモノを使って書くのがイマドキの新常識なんだとか。

      section.step
        h1 メタ言語とは

      section.step
        h1 CoffeeScript
        p こう書くと
        pre.prettyprint
          | name = 'メタ言語'
          | $('a').on 'click', (ev) -&gt;
          |   alert("こんにちは、\#{name}。")
        p こうなる
        pre.prettyprint
          | var name = 'メタ言語';
          | $('a').on('click', function (ev) {
          |   alaert('こんにちは、' + name + '。');
          | });

      section.step
        h1 Stylus
        p こう書くと
        pre.prettyprint
          | black = rgb(0,0,0);
          | white = rgb(255,255,255);
          | body
          |   background-color: black
          |   color: white
        p こうなる
        pre.prettyprint
          | body {
          |   background-color: #000;
          |   color: fff;
          | }

      section.step
        h1 Jade
        p こう書くと
        pre.prettyprint
          | !!! 5
          | html
          |   body
          |     h1 おれのホームページ
        p こうなる
        pre.prettyprint
          | &lt;!DOCTYPE html&gt;
          | &lt;html&gt;
          |   &lt;body&gt;
          |     &lt;h1&gt;おれのホームページ&lt;/h1&gt;
          |   &lt;/body&gt;
          | &lt;/html&gt;

      section.step.message
        p 元の言語よりシンプルに書けるのが「メタ言語」というものらしい。

      section.step
        h1 メタ言語の特徴

      section.step
        ul
          li 元の言語より短く書ける
          li 元の言語にはない便利な機能が追加されている。
          li 構造を括弧 { ... } ではなく、インデントで表現するモノが多い。
          li あくまで元の言語に変換するための「メタ」言語という立ち位置。
          li 割と流行っているらしい。

      section.step.message
        p 「元の言語に変換する」...?

      section.step
        h1 メタ言語の使い方

      section.step
        h1 インストール
        pre.prettyprint
          | npm install coffee-script stylus jade -g

      section.step
        h1 変換コマンド
        p CoffeeScript
        pre.prettyprint
          | coffee /path/to/script.coffee
        p Stylus
        pre.prettyprint
          | stylus /path/to/style.styl
        p Jade
        pre.prettyprint
          | jade /path/to/page.jade

      section.step.message
        p 毎回これらのコマンドを打つのは面倒なので、Makefile の仕組みに習った Cakefile をつくると良いらしい。

      section.step
        h1 Cakefile つくった
        pre.prettyprint
          | https://gist.github.com/3145402

      section.step
        h1 Cakefile で一発変換
        pre.prettyprint
          | cake build

      section.step.message
        p ...

      section.step.message
        p 結局手間を増やして何が嬉しいのか。

      session.step.question
        p WHY

      section.step
        h1 たとえば CoffeeScript だったら
        ul
          li 初心者が js そのままを書くより安全で早いコードが書ける。
          li バグを入れこみ易い部分を回避する仕組みがある。
          li オブジェクト指向をより直感的に利用できる。
          li インデントによる構造化で書き手の自己主張を最小限に留め、誰が見ても同じ書き方、読みやすいコードを共有できる。

      section.step
        h1 たとえば Stylus だったら
        ul
          li 変数・四則演算・ミックスイン等、プログラミング的な DRY の要素を使って、メンテナンスし易い CSS が書ける。
          li 出力される CSS はミニファイ化したものを出力する事も可能なので、プロダクトのパフォーマンスチューニングにも繋がる。
          li インデントによる構造化で書き手の自己主張を最小限に留め、誰が見ても同じ書き方、読みやすいコードを共有できる。

      section.step
        h1 たとえば Jade だったら
        ul
          li サーバーサイドテンプレートエンジンとしても使える。
          li 閉じタグがないので閉じ忘れの心配がない。
          li インデントによる構造化で書き手の自己主張を最小限に留め、誰が見ても同じ書き方、読みやすいコードを共有できる。

      section.step.message
        p 手間をかけるメリットは十分にあるし、手間を最小限にする仕組みもある。

      section.step
        h1 いろいろなメタ言語

      section.step
        h1 JavaScript
        ul
          li
            | CoffeeScript 
            a(href='http://coffeescript.org/') http://coffeescript.org/

      section.step
        h1 CSS
        ul
          li
            | LESS 
            a(href='http://lesscss.org/') http://lesscss.org/
          li
            | Sass 
            a(href='http://sass-lang.com/') http://sass-lang.com/
          li
            | SassyCSS (SCSS) 
            a(href='http://sass-lang.com/') http://sass-lang.com/
          li
            | Stylus 
            a(href='http://learnboost.github.com/stylus/') http://learnboost.github.com/stylus/

      section.step
        h1 HTML
        ul
          li
            | Haml 
            a(href='http://haml.info/') http://haml.info/
          li
            | CoffeeKup 
            a(href='http://coffeekup.org/') http://coffeekup.org/
          li
            | Jade 
            a(href='http://jade-lang.com/') http://jade-lang.com/

      section.step
        p おわり。

    div.hint
      p スペースか方向キーで操作します。
    script(src='./js/impress.js')
    script(src='./res/google-code-prettify/prettify.js')
    script
      impress().init();
      prettyPrint();
